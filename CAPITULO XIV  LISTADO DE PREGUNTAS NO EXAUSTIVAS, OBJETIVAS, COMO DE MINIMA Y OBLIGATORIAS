CAPITULO XIV 
LISTADO DE PREGUNTAS NO EXAUSTIVAS, OBJETIVAS, COMO DE MINIMA Y OBLIGATORIAS

     Como se ha mencionado al inicio de este trabajo el objetivo del mismo no es brindar opiniones personales. 

     Muy por el contrario, el objetivo que se intenta con este trabajo es poner a disposición de cada lector, independientemente de su jurisdicción, la posibilidad de qué a través de un listado de preguntas con las características de “no exhaustivas, objetivas, como de mínima y obligatorias” puedan los lectores obtener una conclusión propia acerca del caso judicial relatado. 

     Para obtener una conclusión válida la/s hipótesis de partida debe otorgar “todos” los elementos, en este caso, tal elemento lo constituiría “lo expresado” por cada una de las partes a través de sus escritos judiciales, y “lo expresado” por los jueces a través de sus sentencias, en él pleito. 

     Para lograr dicho objetivo, parte del trabajo minucioso que se ha tratado realizar ha sido recolectar y extraer de todas las presentaciones judiciales, lógicamente de las que se ha podido tener acceso- tales elementos. Y en esa recolección y extracción también se ha tratado como mayor cuidado la objetividad en la selección del material, es decir, que cada presentación presentada por una de las partes posee como contrapartida la presentación de la parte contraria, de manera que no quede argumento sin ser rebatido, sin importar quién argumente o quién rebata.

     Entonces, por ejemplo, constituye un hecho probado en el juicio que Google basó Android en la implementación independiente de la especificación de las API de Java realizado por la Fundación de Software Apache [116]. 

     Es decir, Google no copió el código fuente declarado “directamente” de Java SE de Oracle, ni siquiera lo hizo de la versión open-source de Java, Open JDK, sino como se expresa de la Fundación Apache. 

     A su vez, también constituye un hecho probado en el juicio que la implementación de la especificación de las API de Java de Sun/Oracle por parte de la Fundación Apache nunca obtuvieron la aprobación del test de compatibilidad de Java o TCK de Sun/Oracle.  

    Tales hechos fueron probados en el juicio, y como tales son objetivos cuando se lo expone. 

     Así entonces, todo lo narrado en los capítulos anteriores no es más que la “extracción real de lo dicho por las partes y jueces en el juicio”, las partes han hablado a través de sus presentaciones judiciales y argumentos orales, y los jueces lo han hecho a través de sus sentencias. 

      A su vez, la terminología de “no exhaustivas” posee el significado que podrían agregarse otras preguntas para cumplir con la finalidad propuesta. No hay duda de ello. Y por su parte, el requisito de “no exhaustivas” se relaciona con el requisito de “de mínima y obligatorias”, con el cual quiere significarse que como mínimo ciertas preguntas de base deben existir, pero también porque de los hechos narrados es imposible no efectuarse ciertas preguntas, por ello lo de “obligatorias”. 

     Finalmente, el requisito de “objetivas” la misma palabra lo indica, las preguntas son abstractas, agnósticas, independientes a la posición que cada una de las partes ha tomado en el pleito en relación a lo que considera protegible por derechos de autor de EE.UU., y ninguna pregunta intenta favorecer o perjudicar a ninguna parte litigante. 

     Este juicio ha sido muy particular, porque su disputa no sólo ha sido vertida por las partes en los estrados judiciales, sino también que se ha dado por terceros en los medios de comunicación, sobre todo en la red internet. 

     Así existe una gran cantidad de información relacionado al caso, no sólo desde lo judicial sino también desde lo técnico y comercial, comentado por distintas partes con distintos intereses y motivaciones. 

     En algún punto esto fue tan llamativo, que hizo que el Juez William Alsup emitiera el 7 de agosto de 2012 una orden judicial “Order regarding Disclosure of Financial Relationship with Commentators on Issues in this Case” [117] “muy particular”. 

     El Juez ordenó a Oracle y Google que informaran al respecto de todos los autores, periodistas, comentaristas o bloggers los cuales hayan reportado o comentado al respecto del caso en cuestión y hayan recibido algún pago -distinto a lo que sería un pago por una suscripción normal de un servicio- por alguna de las partes o sus abogados mientras se encuentre pendiente el trámite de lo que iba del juicio. 

     Entonces, la “objetividad” se relaciona a que lo narrado en los distintos capítulos surge conforme a la información expuesta en las presentaciones judiciales, y no de otra fuente, como puede ser un blog de noticias. Y de nuevo, ello es así, porque es parte del objetivo del trabajo, y no se relaciona a emitir juicio de valor sobre lo expuesto en diferentes sitios periodísticos acerca del caso judicial.        

     A su vez, las preguntas “no exhaustivas, objetivas, como de mínima y obligatorias” están formuladas de forma agnóstica o con independencia a las distintas posibles jurisdicciones en materia de derechos de autor. Por lo cual sin importar la jurisdicción y ley aplicable del lector las hipótesis de las preguntas son válidas para colaborar en la elaboración de la propia conclusión de cada lector. 

     Por último, las preguntas se ofrecen en un orden determinado que no es al azar, sino que, por el contrario, se intentó hacerlo con la finalidad de ayudar al lector en su razonamiento, y así se comienza desde la pregunta más básica hacia las más complejas.

     La idea es la misma, colaborar en que cada lector pueda construir su propia conclusión.  

     ¿Por qué esta metodología? 

     Simplemente porque ese fue el objetivo al iniciar este trabajo de investigación. 

     La idea principal ha sido intentar mostrar a través de una narración simple lo expresado por las partes litigantes y los jueces intervinientes, basándose para ello el autor en las presentaciones legales y resoluciones judiciales de lo debatido y resuelto en el litigio. La idea es simple, pero el desafío ha sido enorme.
	      

     Las preguntas “no exhaustivas, objetivas, como de mínima y obligatorias” son las siguientes:  

1.	¿Cómo se define por las leyes de derechos de autor de su jurisdicción a los “programas de computación”? 

2.	¿Qué tan semejante es dicha definición dada en su jurisdicción a la brindada por el artículo 101 del Título 17 USC? “conjunto de declaraciones o instrucciones para ser usadas directa o indirectamente en una computadora con el propósito de llevar a cabo un resultado”

3.	En las leyes de su jurisdicción que regulan y otorgan protección bajo el sistema de derechos de autor, ¿existe alguna diferencia en la exigencia para la protección de los “programas de computación” de las demás obras protegidas? 

4.	¿Cuáles son los requisitos exigidos en las leyes de derechos de autor de su jurisdicción para la protección de un “programa de computación”?

5.	Cuándo en las leyes de derechos de autor de su jurisdicción se otorga protección a los “programas de computación”, ¿se regula dicha protección tanto en su versión de código objeto como de código fuente? 

6.	Si es así, es decir que se protege el código fuente ¿dicha ley efectúa alguna diferencia para la protección del “código fuente declarado” y “código fuente implementado”? 

7.	En las leyes de derechos de autor de su jurisdicción ¿se hace referencia a “código fuente” en general?, o ¿se regula acerca de “funciones de prototipos” “interfaces de software”, “encabezados” o “declaraciones de código”? 

8.	Conforme a las leyes de derechos de autor de su jurisdicción, ¿es protegible bajo derechos de autor la implementación de un lenguaje de programación como programa de computación? 

9.	Dicha de otra manera, ¿Todas las implementaciones que conforman programas de computación son protegibles en su jurisdicción bajo las leyes de derechos de autor? o ¿existe algún tipo de programa de computación que no es protegible en su jurisdicción?

10.	Conforme a las leyes de derechos de autor de su jurisdicción, y a la interpretación de las mismas por los jueces de su jurisdicción ¿se encuentran protegidos, los elementos calificados por el Tribunal de Apelaciones del Circuito Federal (Circuito Noveno) como “no literales” de un programa de computación”, es decir, entre ellos la estructura, secuencia y organización de un programa de computación? Si ello fuera así, ¿en qué circunstancias y que elementos deberían ser ponderados?

11.	Conforme a las leyes de derechos de autor de su jurisdicción y a la interpretación de dichas leyes por los tribunales, ¿existe en su jurisdicción alguna interpretación judicial que haya determinado que cierto tipo de obra protegida, específicamente cierto tipo de código fuente (código fuente declarado) se encuentre más alejado al núcleo de protección conforme al sistema de derechos de autor que otro tipo de código fuente (código implementado)? 

12.	Independientemente del tipo de lenguaje de programación, y para el caso que exista una implementación, cree Ud. que una librería de software estándar ¿forma parte del lenguaje de programación implementado? ¿o por el contrario es independiente de dicho lenguaje implementado?

13.	¿En qué casos las leyes de derechos de autor de su jurisdicción justifican la descompilación o procesos de ingeniería inversa o similares de código de terceros sin autorización o licencia del titular o propietario del código (como un todo) o programa de computación en cuestión?

14.	Conforme a las leyes de derechos de autor de su jurisdicción, y para el caso que se lo haga, ¿se regula o se interpreta por los tribunales a la “interoperabilidad” entre programas de computación como una excepción o limitación necesaria a los derechos de autor?

15.	Por otro lado, conforme a su legislación, ¿en qué momento debe ser analizada la interoperabilidad, al momento de creación o al momento de la utilización o copia? Para el caso ¿qué factores externos se toman en cuenta para su análisis?

16.	¿En qué norma de las leyes de derechos de autor de su jurisdicción se codifica el principio que establece la “división entre las ideas y su expresión” es decir donde la protección bajo derechos de autor se extiende a la expresión de las ideas, pero no a las ideas en sí mismas, semejante a lo dispuesto en el artículo 102 inciso b) del Título 17 del USC, que dice: “en ningún caso el derecho de autor para la autoría de una obra original se extiende a las ideas, procedimientos, procesos, sistemas, métodos de operación, conceptos, principios o descubrimientos, sin importar la forma en las cuales estos sean descriptos, explicados, ilustrados, o incorporados en la obra en cuestión.”?

17.	Conforme a las leyes de derechos de autor de su jurisdicción, ¿la protección acordada a la expresión de una idea, se extingue por la circunstancia que dicha expresión se haya incorporado en un método de operación?

18.	Es decir, el derecho de autor de su jurisdicción ¿protege la “expresión de un método de operación”? 

19.	En definitiva, conforme al régimen de derechos de autor de su jurisdicción una obra original ¿se encuentra sujeta a protección bajo el derecho de autor siempre que el autor posee múltiples formas de expresar la idea? o más allá del carácter expresivo que pueda tener la obra original se niega dicha protección por constituir un método de operación?

20.	Conforme a las leyes de derechos de autor de su jurisdicción, ¿cómo se interpreta los términos “originalidad” y “expresión” en programas de computación? 

21.	Es decir, ¿Cuándo las líneas de código que conforman un programa de computación son originales y expresivas?


22.	En las leyes de derechos de autor de su jurisdicción ¿se regula a las interfaces de software? 

23.	Si es ello así, ¿se las excluye de protección de derechos de autor?, y si es así, ¿es excluida de protección por derechos de autor en todos los casos?, ¿o sólo en algunas situaciones reguladas?

24.	Conforme a las leyes de derechos de autor de su jurisdicción, y a la interpretación de las mismas por los tribunales ¿en qué momento se debe analizar la “expresión creativa”, es decir, las varias formas u opciones disponibles de expresar una idea ¿al momento de su misma creación por el autor al escribir el código y representar una determinada funcionalidad? o ¿al momento que dichas líneas de código son copiadas por un tercero sin autorización de su autor?

25.	Conforme a las leyes de derechos de autor de su jurisdicción, ¿existe en la misma regulación alguna limitación o excepción que se asemeje a la limitación a los derechos de autor conforme lo establecido en el artículo 106 del Título 17 USC de uso justo o legítimo (en inglés “fair use”)?

26.	Conforme a las leyes de derechos de autor de su jurisdicción, y suponiendo que la utilización de cierto tipo de código definido como el del litigio en cuestión llamado código declarado o funciones de prototipos o interfaces de software o API, no fuera protegible en su jurisdicción ¿cómo influiría ello en la interpretación de las licencias de software libre y código abierto (FOSS) GNU GPL, AGPL y LGPL, -y de cualquier otra similar al respecto que pudiera contener similares obligaciones- en relación a la técnica de combinación de código mediante vínculos estáticos y dinámicos y a la posibilidad que ello pueda o no generar la creación de una obra derivada de software?

27.	Conforme a las leyes de derechos de autor de su jurisdicción, y a la interpretación de las mismas por los tribunales, ¿se reconoce, y más allá de su denominación, a la “copia literal” y a la “copia no literal” de elementos literales (código fuente y código objeto) y no literales de un programa de computación (entre otros la estructura, secuencia y organización)?

28.	Suponiendo que conforme a las leyes de derechos de autor de su jurisdicción el código fuente declarado no fuese protegible por derechos de autor en sí mismo, ¿podría considerarse protegible su estructura, secuencia y organización? 

29.	Si ello fuese así, ¿en qué casos se podría proteger la estructura secuencia y organización del código declarado de un programa de computación? 

30.	Y conforme a su legislación de derechos de autor, ¿se podría considerar que el código fuente implementado en forma independiente por un tercero constituye una obra derivada cuando este contenga en forma literal o no literal la estructura, secuencia y organización del código fuente declarado? 

31.	Una implementación independiente ¿puede ser considerada como una obra derivada de la especificación del software implementado?   








